Teil1
1.注意output greyscale 的时候 要使用 rint 将float转化为int 直接
(int) typecast 会产生误差
然后要在输出时 使用 Contrast 把pixels 中的float的 Wertebereich 变成
[0,1]. 否则在输出时也会有问题
2. 一开始用int 数组 (dynamic 分配）结果总是会在运行时出错，core dumped,
or double free or corruption(out) Aborted(core dumped) or segmentation fault

3. ReadHuf时时发现mdCdCol["11"] 没有值的但其实是有的，发现ReadHufCode 中
调用的是GreyScale gs把不是 GreyScale & gs 所以问题出在 copy constructor 上
因为 我写的 是没有copy 相关 map 的， 所以 就是 default 的空 map
所会会 出 问题
4.  一开始 输 frequency 发现 错位， 原因 是 读取 width 之后 忘了读取
height  所以 错位
5.~



The grey value 60 The freq is 24576  the bs are 0	0	96	0
The grey value 61 The freq is 15728640  the bs are 0	240	0	0
The grey value 62 The freq is 1140850922  the bs are 68	0	0	234
The grey value 63 The freq is 65024  the bs are 0	0	254	0
The grey value 64 The freq is 3670016  the bs are 0	56	0	0
The grey value 65 The freq is 142344192  the bs are 8	124	0	0
The grey value 66 The freq is 142606336  the bs are 8	128	0	0
The grey value 67 The freq is 127401984  the bs are 7	152	0	0
The grey value 68 The freq is 109445120  the bs are 6	134	0	0
The grey value 69 The freq is 106823680  the bs are 6	94	0	0

00 00 08 2e  从此处开始grey60   00  00 09 60 00 00 0a f0 00  |..........`.....|
00000100  00 0b 44 00 00 0a ea 00  00 09 fe 00 00 0a 38 00  |..D...........8.|
00000110  00 08 7c 00 00 08 80 00  00 07 98 00 00 06 86 00


可见 09 60 却读成了 96 
分析后面的可发现 若出现0a 就会跳过不读
这因为之前 写的是 is >> b1 >> b2 >> b3 >> b4 而>> 是会跳过白字符的
所以要用 is.get(char ..) 来写， 但不可以 直接 is.get(b1) 会出现

greyscale.cpp:794:26: error: cannot bind non-const lvalue reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ to an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’
                 is.get(b1);
                          ^
In file included from /usr/include/c++/7/iostream:40:0,
                 from greyscale.h:1,
                 from greyscale.cpp:1:
/usr/include/c++/7/istream:316:7: note:   initializing argument 1 of ‘std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::get(std::basic_istream<_CharT, _Traits>::char_type&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::char_type = char]’
       get(char_type& __c);

可能是因为　is.get() 不支持unsigned char 所以is.get(char &) 没有效果
因 unsigned 类型转换 导致 引用无效 所以先用一个 temp char 读取下一是输出
再 typecast 

6. ReadHufCode 中 出现 读的时候 code 错位
因为 previous 剩余的 并 没有 传递到下一个loop 中的float的所以
找到 是 prevLeftCode  写成了prevSubCode

7.
此处开始color code 138 138 149   05  80 72 00 70 d0 83 79 eb  |.........r.p..y.|
00000410  60 70 90 83 59 ec 4e 9c  52 d6 b9 ec e0 78 ee 9e  |`p..Y.N.R....x..|
00000420  8e 94 59 e7 79 e6 b9 e7  6e 93 72 d3 0a 46 ae 9f  |..Y.y...n.r..F..|
00000430  7e 56 8e 96 ae 43 1e 5e  99 e7 7e 57 79 ef 7e 5f  |~V...C.^..~Wy.~_|
00000440  6a 46 99 e6 9e 5c 5e 52  0a

而由huffman 的code 138          0000 0101 100
                  139          0000 0101 110
                  140          0101 0100 1000

05 80 72 00

0000 0101 1000 0111 0010 0000
可见 在第2个byte 开始 1000 0000 1011  中间的一个1 被吃掉了

而 测试的时候 若是输出 P2模式 正确

writeHuff 中有一处 应该 是 overflow = toBeFilled 而不是 nexLen - toBeFilled
改好之后 再运行， Aborted
分析 之后， 发现 是 因为 在 正好 下一个 code 完全fill the gap
之后 new loop if(len == 0) continue
will not update the overflow
so next time the next next code will be substracted the overflow len char
which is untrue since it should be primitive (without chaning anyting) ,since the previous
one cover the gap. the deficit is 0 已经前一辈 还好了债，
下一辈 仍要 还， 不厚道啊


8. 
original first line
138 139 140 139 139 136 134 131 134 139 138 136 133 131 132 134

read in  then write in huffman then read and write in P2模式

138	139 140 139 139 136 134	0 96	  93	  66	 139	 138	 136	 133	   0	  96	  94	  92	 134	 132	 132	   0	  96	  60	   0	   0	  94	  78	 125	   0	 125	   0	  88	  63	  63	  65	  62	  76	   0	  95	  91	  91	  93	  63	  80	  91	   0	  63	  63	 135	  76	 134	 132	 127	 126	   0	  96	  93	  66	   0	   0	  48	   0	   0	  98	   0	  96	  58	  76	   0	  96	  93	  59	   0	  61	   0	   0	  48	   0	  96	  99	   0	   0	  96	  48	   0	   0	  98	   0	   0	  48	   0	  96	  64	  48	   0	   0	  48	   0	   0	  48	 126	   0	 111	   0	 111	   0	 111	   0	   0	  48	 132	   0	   0	  98	 126	 126	 126	 127	 132	   0	   0	  48	 124	   0	   0	 102	  48	 102	  94	  63	  99	   0	  63	  63	   0	   0	  96	  48	  96	  98	 127	 125	 125	 124	   0	   0	  96	   0	  89	   0	 111	   0	  96	   0	   0	  89	   0	   0	 102	  63	  74	  48	 138	  40	  48	 101	  59	 112	   0	   0	  98	 126	   0	   0	 102	  63	 101	  75	 137	  89	 119	 124	   0	   0	  48	   0	  96	 102	  94	  63	   0	   0	   0	 102	  63	   0	   0	   0	  96	   0	  63	   0	 111	 125	 124	 125	   0	   0	  48	 125	 119	   0	  96	   0	  63	   0	   0	   0	  96	  63	   0	 124	 124	   0	   0	 102	   0	  63	 119	 118	   0	   0	  96	   0	  63	 117	 118	 118	 117	 118	 118	 117	 119	   0	  96	 143	  85	  67	  37	 116	  59	  59	 100	 117	 116	 113	 114	 114	 112	 112	 115	 119	 118	 112	 112	 114	 113	 111	 112	 113	 115	 114	 111	 110	 111	 110	 110	 115	 113	   0	  77	   0	  40	   0	 104	  79	   0	  58	  91	   0	 101	  60	  85	  48	  63	  98	 114	  89	  36	  75	   0	 104	  89	  86	  94	   0	  58	  94	   0	 100	  96	  65	  98	 109	 110	 110	 109	   0	  94	   0	  49	 110	  62	  40	  98	   0	  94	  98	   0	  65	   0	 100	  99	  96	  90	  49	  49	  49	  58	   0	  59	 103	  99	  99	  99	  89	  89	  99	 103	  59	  59	  89	  67	  67	  67	  67	 103	 103	  67	  59	  67	  59	  61	   0	  68	  76	  75	  75	 104	  76	  79	  68	  65	 157	  48	 101	  68	  49	 101	  68	  49	  68	  89	  90	  86	  48	  48	 101	  68	  49	  58	  63	  63	  63	  86	  86	 101	  58	  86	  48	  99	  86	  48	  58	  80	 108	  94	  92	  93	  90	  93	  95	  97	  94	  94	  96	  93	  93	  93	  92	  92	  90	  93	  92	  91	  91	  92	  90	  88	  89	  90	  94	  93	

05  80 b9 52 01 70 2e 82 0e  |..........R.p...|
00000410  9e 7a e9 82 e0 59 04 1d  2c f6 5a 74 e5 a9 6b 3d  |.z...Y..,.Zt..k=|
00000420  cf 65 b8 2f 05 ee 9e 78  e9 4b 59 e7 97 9e 67 b9  |.e./...x.KY...g.|
00000430  e7 96 e9 3a 72 d3 a1 5

138    0000 0101 100
139    0000 0101 110
140    0101 0100 1000
136    1000 0010 000
134    0111 0100 11
131    1100 1111 01

so the code should be 
              139 begins     140             139            139
0000 0101 100|0 0000 1011 10|01 0101 0010 00|00 0001 0111 0|000 0010 1110

  0    5    8    0    b     9    5     2    0     1    7    0     2    e

136           134           131          134           139
1000 0010 000|0 1110 1001 1|110 0111 101|0 1110 1001 1|000 0010 1110

 8     2    0    e     9    e     7    a    e    9      8   2     e


            00000410   9    e     7    a    e    9
输入(writeHuf)没有问题，所以应该 是 读取时 ReadHuf 的问题





看 对应的 result2.txt

color is 136
the prevLeftC is 01110
the prevLeftCode : 01110
the code is 10011110
Before theCodeBOund loop the prevLCLen is: 5
In the for loop theCodeBound: subCode
011101
In the for loop theCodeBound: subCode
0111010
In the for loop theCodeBound: subCode
01110100
In the for loop theCodeBound: subCode
011101001
In the for loop theCodeBound: subCode
0111010011
The valid code is: 0111010011
The color is: 134
the prevLeftCode : 110
The valid preSubCode is 11
The color is : 0
the prevLeftCode : 0
the code is 01111010
Before theCodeBOund loop the prevLCLen is: 1
In the for loop theCodeBound: subCode
00
In the for loop theCodeBound: subCode
001
In the for loop theCodeBound: subCode
0011
In the for loop theCodeBound: subCode
00111
In the for loop theCodeBound: subCode
001111
The valid code is: 001111



其中 134 开始之前 可检查的都是对的， 说明 读取 没有问题，
然后 发现 11  就对应的code 
但是检查  mpColCd output 中 没有 对应的：

The coding is:
   color      |   code 
      32	000001011011010
      33	00000101011
      34	1100111010
      35	111100110
      36	10101001
      37	0011101
      38	1000000
      39	1010101
      40	1011001
      41	1011010
      42	1011011
      43	1011000

可见从32 开始 (同时一可见 map 是如何 排序 key 的 即 此处按大小)
显然没有 0 的位置

但是 mpCdCol 中有一项

 1011000	43
 1011001	40
 1011010	41
 1011011	42
  101110	88
  101111	85
      11	0
  110000	83
  110001	81

所以 肯定 是哪里 引入的

BuildMap 中:
#ifdef OUTDEBUG
            cout << "The code is: " << theCode << endl;
            cout << "if code == 11 " << (theCode == "11") << endl;
#endif            
            mpColCd[myT.GetGreyValue()] = theCode;
            mpCdCol[theCode] = myT.GetGreyValue();
#ifdef OUTDEBUG
            cout << "mpCdCol[theCode] = " << mpCdCol[theCode]<<endl;
            cout << "mpCdCol[11] = " << mpCdCol["11"] << endl;
#endif

可能 是在 mpCdCol["11"]的时候 引入 mpCdCol["11"] = 0
眼不见为净

所以 也是 提醒， 没事不要 看map 的key 对应的value ，否则会引入
不必要的error


9.

/bildtest -a13 result13.pgm 
Reading image... 'bilder/roentgen.pgm'
Format: PGM-ASCII
Setting checking format...

Reading image... 'result13.pgm'
Format: Huffman
Comparing...
Sorry, but your image differs up to 148 grey value(s) from the original!


但是 观察 从 result13.pgm 读取 然后以 P2 输入 得到的
与 原图比较
(diff)
1a2
> # Creator: Mapra

选别的图
类似


1a2
> # Creator: Mapra
1902c1903
<    0   0   0   0   0   0   0   0   0   0
\ No newline at end of file
---
>    0   0   0   0   0   0   0   0   0   0


说明 我编的 huffman code decode 没有问题，因为可以闭环
得到原来的文件， 所以 问题 出在 如何定义 code 的规则上

一一开始 担心 是 min heap 的排序错了 所以改变了 compare function
即 > 变 <   试着 跑了一下， write 还行 但是 read 会跑很久也没跑出来
估计是 出现机率高的，此时反而被赋予 成的code 所以decode 要慢很多， 所以之前
没有问题

接着，仔细看hufman code  aufgabestellung 中说，
merge 的 freq  是两个子树的之和 而greyvalue 为两者的min

但code 中:
int grey = lTree -> GreyValue;
当时想当然尔， 认为lTree 是top rTree 是紧接的，所以lTree 对应的 小于 rTree的
但是 可能是 freq left < freq right  while greyvalue left > greyvalue right

所以改为
 int grey = ((lTree -> GreyValue) < (rTree -> GreyValue)) ? (lTree -> GreyValue) : (rTree -> GreyValue);


测试 结果：

./bildtest -a13 result13.pgm 
Reading image... 'bilder/roentgen.pgm'
Format: PGM-ASCII
Setting checking format...

Reading image... 'result13.pgm'
Format: Huffman
Comparing...
OK!


YEAH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


.
gs.GreyTransform() not allowed
since it will change gs
GreyTransform make it a friend 